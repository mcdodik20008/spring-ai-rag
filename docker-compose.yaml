version: "3.9"

networks:
    edge: # внешняя
        driver: bridge
    spring-ai-network: # внутренняя
        driver: bridge

volumes:
    pg_data:
    ollama_data:
    n8n_db_data:
    n8n_data:
    letsencrypt:

services:
    # --- Ваш Spring-AI API (только внутренняя сеть) ---
    spring-ai:
        image: mcdodik/spring-ai
        container_name: spring-ai-api
        environment:
            POSTGRES_HOSTNAME: pgvector
            OLLAMA_HOSTNAME: ollama
            ZIPKIN_URL: zipkin
            OPENROUTER_API_KEY: ${OPENROUTER_API_KEY:-sk-or-v1}
            OPEN_ROUTER_MODEL_DEFAULT: x-ai/grok-4-fast:free
            OPEN_ROUTER_MODEL_SUMMARY: x-ai/grok-4-fast:free
            OPEN_ROUTER_MODEL_PROMPT_GEN: x-ai/grok-4-fast:free
            OPEN_ROUTER_MODEL_CHUNKING: x-ai/grok-4-fast:free
            POSTGRES_DB_NAME: ragdb
            POSTGRES_USERNAME: postgres
            POSTGRES_PASSWORD: postgres
            OLLAMA_EMBEDDING_MODEL: nomic-embed-text
            TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
            TELEGRAM_CHANNELS: ${TELEGRAM_CHANNELS}
        ports:
            - "8080:8080"
        restart: unless-stopped
        networks:
            - spring-ai-network

    pgvector:
        image: ankane/pgvector:latest
        container_name: pgvector
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: ragdb
        ports:
            - "5432:5432"
        volumes:
            - ./ci/init:/docker-entrypoint-initdb.d
            - pg_data:/var/lib/postgresql/data
        restart: unless-stopped
        networks:
            - spring-ai-network

    ollama:
        image: ollama/ollama:latest
        container_name: ollama
        restart: unless-stopped
        ports:
            - "11434:11434"
        networks:
            - spring-ai-network
        volumes:
            - ollama_data:/root/.ollama

    zipkin:
        image: openzipkin/zipkin:latest
        container_name: zipkin
        ports:
            - "9411:9411"
        environment:
            STORAGE_TYPE: mem
        restart: unless-stopped
        networks:
            - spring-ai-network

    # --- n8n Postgres ---
    n8n-db:
        image: postgres:15
        container_name: n8n-db
        environment:
            POSTGRES_DB: ${N8N_DB_DATABASE:-n8n}
            POSTGRES_USER: ${N8N_DB_USER:-n8n}
            POSTGRES_PASSWORD: ${N8N_DB_PASSWORD:-n8n_password}
            TZ: ${GENERIC_TIMEZONE:-Europe/Riga}
        volumes:
            - n8n_db_data:/var/lib/postgresql/data
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U ${N8N_DB_USER:-n8n} -d ${N8N_DB_DATABASE:-n8n}" ]
            interval: 10s
            timeout: 5s
            retries: 10
        networks:
            - spring-ai-network
        restart: unless-stopped

    # --- n8n (UI + Webhooks через Traefik) ---
    n8n:
        image: n8nio/n8n:latest
        container_name: n8n
        depends_on:
            n8n-db:
                condition: service_healthy
        environment:
            # базовые
            N8N_HOST: ${N8N_EDITOR_DOMAIN}
            N8N_PORT: 5678
            N8N_PROTOCOL: https
            GENERIC_TIMEZONE: ${GENERIC_TIMEZONE:-Europe/Riga}

            # внешние URL'ы (ВАЖНО!)
            N8N_EDITOR_BASE_URL: https://${N8N_EDITOR_DOMAIN}
            WEBHOOK_URL: https://${N8N_WEBHOOK_DOMAIN}

            # хранилище
            DB_TYPE: postgresdb
            DB_POSTGRESDB_HOST: n8n-db
            DB_POSTGRESDB_PORT: 5432
            DB_POSTGRESDB_DATABASE: ${N8N_DB_DATABASE}
            DB_POSTGRESDB_USER: ${N8N_DB_USER}
            DB_POSTGRESDB_PASSWORD: ${N8N_DB_PASSWORD}

            # безопасность/приватность
            N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
            N8N_SECURE_COOKIE: false
            N8N_DIAGNOSTICS_ENABLED: "false"
            N8N_PERSONALIZATION_ENABLED: "false"
            N8N_BASIC_AUTH_ACTIVE: ${N8N_BASIC_AUTH_ACTIVE}
            N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER}
            N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}

            # выполнение
            EXECUTIONS_MODE: regular
            EXECUTIONS_DATA_SAVE_ON_SUCCESS: none
            EXECUTIONS_DATA_SAVE_ON_ERROR: all
        volumes:
            - n8n_data:/home/node/.n8n
        ports:
            - "5678:5678"
        labels:
            - traefik.enable=true

            # UI n8n (https://n8n.<domain>)
            - traefik.http.routers.n8n-editor.rule=Host(`${N8N_EDITOR_DOMAIN}`)
            - traefik.http.routers.n8n-editor.entrypoints=websecure
            - traefik.http.routers.n8n-editor.tls.certresolver=le
            - traefik.http.services.n8n-editor.loadbalancer.server.port=5678

            # Webhooks (https://bot.<domain>/webhook...)
            - traefik.http.routers.n8n-webhook.rule=Host(`${N8N_WEBHOOK_DOMAIN}`) && PathPrefix(`/webhook`)
            - traefik.http.routers.n8n-webhook.entrypoints=websecure
            - traefik.http.routers.n8n-webhook.tls.certresolver=le
            - traefik.http.services.n8n-webhook.loadbalancer.server.port=5678

            # безопасные заголовки (опционально)
            - traefik.http.middlewares.sec-headers.headers.stsSeconds=31536000
            - traefik.http.middlewares.sec-headers.headers.forceSTSHeader=true
            - traefik.http.middlewares.sec-headers.headers.stsIncludeSubdomains=true
            - traefik.http.routers.n8n-editor.middlewares=sec-headers
            - traefik.http.routers.n8n-webhook.middlewares=sec-headers
        networks:
            - edge            # чтобы Traefik видел сервис
            - spring-ai-network
        restart: unless-stopped
