spring:
  application:
    name: spring-ai
  datasource:
    url: jdbc:postgresql://localhost:5432/${POSRGRES_DB_NAME:ragdb}
    username: ${POSTGRES_USERNAME:postgres}
    password: ${POSTGRES_PASSWORD:postgres}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:-1}
      max-request-size: ${MAX_REQUEST_SIZE:-1}
      enabled: true
  web:
    resources:
      add-mappings: false

  ai:
    chat:
      advisors:
        - bean: simpleLoggerAdvisor
        - bean: strictContextAdvisor
    ollama:
      embedding:
        model: ${OLLAMA_EMBEDDING_MODEL:nomic-embed-text}
        options:
          num-ctx: 8192
      base-url: http://localhost:11434
      chat:
        options:
          model: ${OLLAMA_CHAT_MODEL:owl/t-lite} #phi3:mini owl/t-lite gemma3:1b-it-qat
    vectorstore:
      pgvector:
        initialize-schema: false
mybatis:
  mapper-locations: classpath*:db/*.xml
  type-handlers-package: classpath*:mcdodik.springai.rag.db

logging:
  level:
    root: INFO
    mcdodik: DEBUG

mcdodik:
  openrouter:
    enabled: true
    temperature: 0.2
    max-tokens: 8192
    top-p: 0.95
    api-key: ${OPENROUTER_API_KEY}
    models:
      default: deepseek/deepseek-r1:free  #mistralai/mistral-nemo #openai/gpt-oss-20b
      summary: mistral-7b-instruct
      promptGen: deepseek-llm
      chunking: claude-2.1
  advisors:
    vector:
      topK: 24
      vectorStoreSimilarityThreshold: 0.35
      rerankSimilarityThreshold: 0.75
      finalK: 12
      maxContextTokens: 20000
      order: 0