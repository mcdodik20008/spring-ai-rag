package mcdodik.springai.config.plananalyzer.datasource

import mcdodik.springai.config.Loggable
import java.sql.Connection
import java.sql.PreparedStatement
import java.sql.Statement

class ProxyConnection(
    private val delegate: Connection,
    private val source: ExplainProxyDataSource,
) : Connection by delegate,
    Loggable {
    override fun createStatement(): Statement = ProxyStatement(delegate.createStatement(), delegate, source)

    override fun prepareStatement(sql: String): PreparedStatement = ProxyPreparedStatement(delegate.prepareStatement(sql), delegate, sql, source)

    override fun prepareStatement(
        sql: String,
        autoGeneratedKeys: Int,
    ): PreparedStatement = ProxyPreparedStatement(delegate.prepareStatement(sql, autoGeneratedKeys), delegate, sql, source)

    override fun prepareStatement(
        sql: String,
        resultSetType: Int,
        resultSetConcurrency: Int,
    ): PreparedStatement = ProxyPreparedStatement(delegate.prepareStatement(sql, resultSetType, resultSetConcurrency), delegate, sql, source)

    override fun prepareStatement(
        sql: String,
        resultSetType: Int,
        resultSetConcurrency: Int,
        resultSetHoldability: Int,
    ): PreparedStatement =
        ProxyPreparedStatement(
            delegate.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability),
            delegate,
            sql,
            source,
        )
}
